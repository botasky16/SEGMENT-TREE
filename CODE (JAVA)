package SegmentTree;

/**
 *
 * @author PRAPHUL
 */

public class SegTree {
public static void main(String args[])
{
    int ar[]={-1,2,4,0,7,1,3,2};
 int low=0;
int high=7;
int tree[]=new int [15];
buildTree(ar,tree,0,7,0);
for(int x:tree)
{
  System.out.print(x+" ");
}
System.out.println();
System.out.println("min no in range = "+rangeMin(tree,0,3,low,high,0));
int lazy[]= new int [15];
lazyUpdate(tree,lazy,0,3,3,0,7,0);
lazyUpdate(tree,lazy,0,3,1,0,7,0);
lazyUpdate(tree,lazy,0,0,2,0,7,0);
System.out.println("min no  between range 3 & 5 using lazy="+lazyMinRange( tree, lazy,3 ,5,low ,high,0));
}
//FUNCTION TO BUILD TREE
static  void buildTree(int ar[],int tree[],int start,int end,int treeNode)
{ 
   if(start==end)
    {  
        tree[treeNode]=ar[start];
       
        return ;
    }
    int mid=(start+end)/2;
    buildTree(ar,tree,start,mid,2*treeNode+1);
    buildTree(ar,tree,mid+1,end,2*treeNode+2);
   tree[treeNode]=Math.min(tree[treeNode*2+1],tree[treeNode*2+2]);    
   
}
static int  rangeMin(int [] Tree,int  qlow,int qhigh,int low,int high,int pos)
{  
    if(qlow>high||qhigh<low)//   NO OVERLAP 
    {
        return Integer.MAX_VALUE;
    }
     if(qlow<=low&&qhigh>=high)//   TOTAL OVERLAP
     {  return Tree[pos];
     }
     int mid=(low+high)/2;//PARTIAL OVERLAP
             return Math.min(rangeMin(Tree,qlow,qhigh,low,mid,pos*2+1), rangeMin(Tree,qlow,qhigh,mid+1,high,pos*2+2));
}
 static void lazyUpdate(int []tree,int lazy[],int StartRange,int EndRange,int delta,int low ,int high,int pos)
 {
     if(low>high)
     {
           return;
     }
      
     
     if(lazy[pos]!=0)
     {
         tree[pos]+=lazy[pos];
         if(low!=high)
         {
             lazy[2*pos+1]+=lazy[pos];
             lazy[2*pos+2]+=lazy[pos];
         }
     lazy[pos]=0;
     }
      if(StartRange>high||EndRange<low) //NO OVERLAP
    {
        return ;
    }
     if(StartRange<=low&&EndRange>=high)//TOTAL OVERLAP
    {
       tree[pos]+=delta;
       if(low!=high)
      {
         
      lazy[2*pos+1]+=delta;
      lazy[2*pos+2]+=delta;
      }
        
     return;
    }
         //PARTIAL OVERLAP
     int mid=(low+high)/2;

     lazyUpdate(tree,lazy,StartRange,EndRange,delta,low,mid,2*pos+1);
     lazyUpdate(tree,lazy,StartRange,EndRange,delta,mid+1,high,2*pos+2);
   
   
     tree[pos]=Math.min(tree[2*pos+1], tree[2*pos+2]);
 
 }
static  int lazyMinRange(int tree[],int lazy[],int qlow,int qhigh,int low ,int high,int pos)
{
    if(low>high)
    {
        return Integer.MAX_VALUE;
    }
    if(lazy[pos]!=0)
    {
        tree[pos]+=lazy[pos];
        if(low!=high)
        {
            lazy[2*pos+1]+=lazy[pos];
            lazy[2*pos+2]+=lazy[pos];
        }
        lazy[pos]=0;
    }
    if(qlow>high||qhigh<low)
    {
        return Integer.MAX_VALUE;
    }
    if(qlow<=low&&qhigh>=high)
    {
        return tree[pos];
    }
    int mid=(low+high)/2;
    return Math.min(lazyMinRange(tree,lazy,qlow,qhigh,low,mid,2*pos+1), lazyMinRange(tree,lazy,qlow,qhigh,mid+1,high,2*pos+2));
}
}

